#!/usr/bin/python
#
# Copyright 2016-present the Material Components for iOS authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Sets version numbers and updates version-dependent metadata.
"""

from __future__ import print_function

import argparse
import manage_pods
import re
import os
import subprocess
import sys

# The path to the LibraryInfo component source file to be updated.
LIBRARY_INFO_PATH = ("components", "LibraryInfo", "src", "MDCLibraryInfo.m")

# The pattern in the LibraryInfo source to match.
# Note the text before and after the version string is contained in groups.
LIBRARY_INFO_PATTERN = r'(MDCLibraryInfoVersionString = @")\d+\.\d+\.\d+(";)'

# The replacement pattern to use for the LibraryInfo source.
# This string is expected to have the version string inserted via
# LIBRARY_INFO_REPLACEMENT_PATTERN % version_string, e.g. "\g<1>1.2.3\g<2>"
#
# Note the explicit group references (\g<1>, \g<2>) instead of the more usual
# references (\1, \2) to avoid the leading digits of the version number getting
# interpreted as part of the group number, e.g. r'\11.2.3\2' looks like a ref
# to a non-existent group 11 instead of group 1 followed by the digit 1.
LIBRARY_INFO_REPLACEMENT_PATTERN = r'\g<1>%s\g<2>'

# The path to the source-of-truth version file to be updated.
VERSION_FILE_PATH = ("VERSION", )  # This is actually a tuple.

def find_library_info_file(directory):
  """Return the LibraryInfo component source file that includes the version.

  Args:
    directory: Path to the directory to examine for the file.

  Returns:
    A path to the version file.
  """
  return os.path.join(directory, *LIBRARY_INFO_PATH)


def find_podspecs(directory):
  """Return a list of *.podspec files on disk.

  Args:
    directory: Path to the directory to recursively search.

  Returns:
    A list of file paths.
  """
  paths = []
  for dirpath, unused_dirnames, filenames in os.walk(directory):
    podspecs = [f for f in filenames if f.endswith('.podspec')]
    paths += [os.path.join(dirpath, f) for f in podspecs]

  return paths


def find_version_file(directory):
  """Return the source-of-truth version file.

  Args:
    directory: Path to the directory to examine for the file.

  Returns:
    A path to the version file.
  """
  return os.path.join(directory, *VERSION_FILE_PATH)


def update_library_info_contents(verbose_printer, contents, version):
  """Update the contents of a source file with a new version.

  Args:
    verbose_printer: A printing function for verbose messages.
    contents: The contents of a source file containing LIBRARY_INFO_PATTERN.
    version: The new version.

  Returns:
    The updated contents string.
  """
  replacement = LIBRARY_INFO_REPLACEMENT_PATTERN % version
  (contents, count) = re.subn(LIBRARY_INFO_PATTERN, replacement, contents)

  if count != 1:
    raise RuntimeError(("LibraryInfo source file does not contain a single ",
                        "instance of regex '%s', aborting.") %
                       LIBRARY_INFO_PATTERN)

  return contents


def update_podspec_contents(verbose_printer, contents, version):
  """Update the contents of a podspec with a new version.

  Args:
    verbose_printer: A printing function for verbose messages.
    contents: The contents of a podspec as a string.
    version: The new version.

  Returns:
    The updated contents string.
  """
  # Strings like
  #   .version      = "2.0.0"
  #   .version = "1.2.3.absc"
  #   .version="my dog has fleas"
  contents = re.sub(r'\.version([\s]*)=([\s]*)"[^"]+"',
                    r'.version\1=\2"%s"' % version,
                    contents)
  return contents


def set_version(verbose_printer, path, version):
  """Update the version file on disk with a new version.

  Args:
    verbose_printer: A printing function for verbose messages.
    path: The path to the version file.
    version: The new version.
  """
  verbose_printer('Updating %s to version %s.' % (path, version))

  try:
    with open(path, 'w') as f:
      f.write(version)
  except:
    print('Could not write version file "%s", aborting.' % path,
          file=sys.stderr)
    raise


def update_library_info_file(verbose_printer, path, version):
  """Update a LibraryInfo source file on disk with a new version.

  Args:
    verbose_printer: A printing function for verbose messages.
    path: The path to the LibraryInfo source file.
    version: The new version.
  """
  verbose_printer('Updating %s to version %s.' % (path, version))

  try:
    with open(path, 'r') as f:
      contents = f.read();
  except:
    print('Could not read LibraryInfo source "%s", aborting.' % path,
          file=sys.stderr)
    raise

  new_contents = update_library_info_contents(verbose_printer, contents,
                                              version)

  try:
    with open(path, 'w') as f:
      f.write(new_contents)
  except:
    print('Could not write LibraryInfo source "%s", aborting.' % path,
          file=sys.stderr)
    raise


def update_podspec_file(verbose_printer, path, version):
  """Update a podspec file on disk with a new version.

  Args:
    verbose_printer: A printing function for verbose messages.
    path: The path to the podspec file.
    version: The new version.
  """
  verbose_printer('Updating %s to version %s.' % (path, version))

  try:
    with open(path, 'r') as f:
      contents = f.read();
  except:
    print('Could not read podspec "%s", aborting.' % path, file=sys.stderr)
    raise

  new_contents = update_podspec_contents(verbose_printer, contents, version)

  try:
    with open(path, 'w') as f:
      f.write(new_contents)
  except:
    print('Could not write podspec "%s", aborting.' % path, file=sys.stderr)
    raise


def create_argument_parser():
  """Create an ArgumentParser for this script.

  Returns:
    An ArgumentParser object.
  """
  parser = argparse.ArgumentParser(description=('Sets version numbers and '
                                                'updates version-dependent '
                                                'metadata.'))
  parser.add_argument('version', help='the new version number.')

  parser.add_argument('--verbose', '-v', dest='verbose', action='store_true',
                      help='print more information about actions being taken.',
                      default=False)

  parser.add_argument('--dir', dest='directory',
                      help='do all work in this directory.',
                      default='.')

  parser.add_argument('--skip_pod_install', action='store_true',
                      help=('skip running `pod install` on all Podfiles.'),
                      default=False)
  parser.add_argument('--fast_pod_install', action='store_true',
                      help=('skip updating the pod repos when running `pod '
                            'install`.'),
                      default=False)
  return parser


def print_nothing(unused_message):
  """Prints nothing.

  Args:
    unused_message: A message to not print.
  """
  pass


def main():
  parser = create_argument_parser()
  args = parser.parse_args()

  # Set up print functions for messages to the user.
  if args.verbose:
    verbose_printer = lambda x: print(x, file=sys.stdout)
  else:
    verbose_printer = print_nothing

  stderr_printer = lambda x: print(x, file=sys.stderr)

  # Find the VERSION file.
  version_file = find_version_file(args.directory)
  if not version_file:
    stderr_printer('Could not find "%s" in directory "%s", aborting.' %
                   (VERSION_FILE_PATH, args.directory))
    sys.exit(-1)

  # Set the official version.
  set_version(verbose_printer, version_file, args.version)

  # Find the LibraryInfo source file.
  library_info = find_library_info_file(args.directory)
  if not library_info:
    stderr_printer('Could not find %s.' %
                   os.path.join(args.directory, LIBRARY_INFO_PATH))
    sys.exit(-1)

  # Update the version number in the LibraryInfo source file.
  update_library_info_file(verbose_printer, library_info, args.version)

  # Find all podspecs files.
  podspecs = find_podspecs(args.directory)
  if not podspecs:
    stderr_printer('Could not find any .podspec files starting from directory '
                   '"%s", aborting.' % args.directory)
    sys.exit(-1)

  # Update the version numbers in each podspec.
  for p in podspecs:
    update_podspec_file(verbose_printer, p, args.version)


if __name__ == '__main__':
  main()

#!/bin/bash
#
# Copyright 2016-present the Material Components for iOS authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# To check all components:
#
# $ check_components
#
# To check specific components:
#
# $ check_components path/to/component [path/to/component [...]]

function verbose_echo() {
  if [[ $VERBOSE -ne 0 ]]; then
    echo "$*"
  fi
}

# Check for verbosity command-line option.
if [[ ( $# -gt 0 ) && ( "$1" -eq "-v" ) ]]; then
  readonly VERBOSE=1
  shift 1
else
  readonly VERBOSE=0
fi

readonly SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR=$(dirname "$SCRIPTS_DIR")
verbose_echo "SCRIPTS_DIR: $SCRIPTS_DIR"
verbose_echo "ROOT_DIR: $ROOT_DIR"

# If no component listed on the command line, find them all.
if [[ $# -eq 0 ]]; then
  readonly PUBLIC_COMPONENTS=$(cd $ROOT_DIR && find components -maxdepth 1 -type d | grep -v "components$" | grep -v "components/private$" | xargs)
  readonly PRIVATE_COMPONENTS=$(cd $ROOT_DIR && find components/private -maxdepth 1 -type d | grep -v "components/private$" | xargs)
  readonly COMPONENTS="$PUBLIC_COMPONENTS $PRIVATE_COMPONENTS"
else
  readonly COMPONENTS=$*
fi
verbose_echo "COMPONENTS: $COMPONENTS"

# Find all the check scripts.
readonly CHECKS=$(find $SCRIPTS_DIR/check -type f -perm +111)
verbose_echo "CHECKS: $CHECKS"

# Run through each component, running each check in turn.
# Keep track of the number that fail any check.
failure_count=0
for component in $COMPONENTS; do 
  all_checks_passed=1
  for check in $CHECKS; do
    $check $ROOT_DIR/$component
    if [[ $? -ne 0 ]]; then
      all_checks_passed=0
    fi
  done

  if [[ $all_checks_passed -ne 1 ]]; then
    failure_count=$((failure_count+1))
  fi
done

if [[ $failure_count -eq 0 ]]; then
  echo All components pass.
else
  echo $failure_count "component(s) failed the checks."
fi

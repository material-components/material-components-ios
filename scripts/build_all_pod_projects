#!/bin/bash
#
# Copyright 2016-present the Material Components for iOS authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

readonly SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR="$SCRIPTS_DIR/.."
readonly BUILD_LOG=build_log.txt

# Build a list of workspaces to build.
# For the moment, we only have CocoaPods projects.
readonly PODFILE_DIRS=$("$SCRIPTS_DIR"/release/manage_pods.py --dir "$ROOT_DIR" list)
workspaces=""
for i in ${PODFILE_DIRS}; do
  workspaces="$workspaces $(find "$i" -d 1 -name '*.xcworkspace')"
done

for workspace in $workspaces; do
  echo "Building schemes in $workspace..."

  # Gather a list of schemes in the workspace.
  # This regex is dumb but works for now.
  schemes=$(xcodebuild -workspace "$workspace" -list | grep "^        ")

  # While it looks like OMG we're building way too much, note that xcodebuild is
  # caching build results, so if scheme A depends on scheme B and scheme B is
  # built first, then scheme A won't rebuild it again.
  for scheme in $schemes; do 
    log_file=$(dirname "$workspace")/"$BUILD_LOG"
    if ! xcodebuild build -workspace "$workspace" -scheme "$scheme" \
          >"$log_file" 2>&1; then
      echo "Failed to build $scheme in $workspace, log left in $log_file."
      echo "Continuing with next build..."
    else
      rm $BUILD_LOG
      echo "Done."
    fi
  done
done

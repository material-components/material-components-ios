#!/bin/bash
#
# Copyright 2018-present the Material Components for iOS authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Finds all targets of a given kind affected by changes since origin/develop.

# type should be a bazel `kind` type. E.g. test or rule.
# https://docs.bazel.build/versions/master/query.html#kind
type="$1"

# Generates a list of files that were modified since origin/develop.
modified_files() {
  git log --name-only --pretty=oneline --full-index $(git merge-base origin/develop HEAD)...HEAD \
    | grep -vE '^[0-9a-f]{40} ' \
    | sort \
    | uniq
}

# TODO: Add check for whether we need to rebuild everything.

# Generates a list of targets that are affected by the files modified since origin/develop.
directly_modified_targets() {
  for line in $(modified_files); do
    label=$(bazel query $line 2>/dev/null)
    if [ "$(basename $line)" == "BUILD" ]; then
      # All targets are affected
      echo "$(dirname $line)/..."
      continue
    fi
    bazel query "attr('srcs', $label, ${label//:*/}:*) union attr('hdrs', $label, ${label//:*/}:*)" 2>/dev/null
  done | sort | uniq
}

# Reads a list of targets and generates a transitive list of dependencies that depend on those
# targets.
indirectly_modified_targets() {
  type="$1"
  while read target; do
    bazel query --universe_scope=//... --order_output=no "kind($type, allrdeps($target))" 2>/dev/null
  done | sort | uniq
}

# Generate the transitive list of affected targets.
directly_modified_targets | indirectly_modified_targets "$type"

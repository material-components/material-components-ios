#!/bin/bash

# Build every iOS codelab.
#
# If --verbose (-v) is specified, print the progress of each build.
#
# If xcpretty is installed (https://github.com/supermarin/xcpretty) then it will
# be used in verbose mode.

readonly SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR="$SCRIPTS_DIR/.."
readonly CURRENT_DIR="$PWD"

# Given a path to an Xcode log file in $1, exit with status 0 if it looks like
# the failure is expected and can be ignored, or exit with non-zero status
# otherwise.
function is_expected_failure() {
  # A test target was specified with the 'build' command.
  grep --quiet "is not configured for Running" "$1"
}

# Test if the xcpretty command is available.
#
# Returns exit status zero if available and non-zero if not.
function is_xcpretty_available() {
  xcpretty > /dev/null 2>&1
  # Exit code 127 is the standard "command not found" exit code.
  if [ $? -eq 127 ]; then
    return 1
  else
    return 0
  fi
}

# Parse command-line arguments.
#
# Note that we're following the command-line exit status convention of zero
# to mean "success."
verbose=1
for i in "$@"; do
  case $i in
    -v|--verbose)
      verbose=0
      shift
      ;;
    *)
      echo "Unknown option $i, aborting."
      exit -1
      ;;
  esac
done

readonly SIGNING_OPTIONS="CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO"

# Check for xcpretty once and cache the result.
is_xcpretty_available
readonly IS_XCPRETTY_AVAILABLE=$?

all_builds_ok=1

cd $SCRIPTS_DIR/external
# Remove the codelabs folder if it exists already so it can be re-cloned.
if [ -d "material-components-ios-codelabs" ]; then
  rm -rf material-components-ios-codelabs
fi
git clone https://github.com/material-components/material-components-ios-codelabs.git
cd material-components-ios-codelabs

readonly WORKSPACE_PATHS=$(find $SCRIPTS_DIR/external/material-components-ios-codelabs -name "*.xcworkspace" ! -name "project.xcworkspace")

for workspace_path in $WORKSPACE_PATHS; do
  # Give the output some meaning, since all the filenames (mostly) the same.
  workspace=$(basename "$workspace_path")
  scheme=$(echo "$workspace" | cut -d '.' -f1)
  codelab=$(echo "$workspace_path" | cut -d/ -f10)
  language=$(echo "$workspace_path" | cut -d/ -f11)
  codelab_state=$(echo "$workspace_path" | cut -d/ -f12)

  echo "xcodebuild $scheme in $workspace for $codelab $codelab_state in $language."
  log_file=$(dirname "$workspace_path")/"build_log_for_scheme_${scheme}.txt"
  options="-workspace $workspace_path -scheme $scheme $SIGNING_OPTIONS"
  build_command="xcodebuild $options build"

  if [ "$verbose" -eq 0 ]; then
    if [ "$IS_XCPRETTY_AVAILABLE" -eq 0 ]; then
      $build_command 2>&1 | tee "$log_file" | xcpretty
    else
      $build_command 2>&1 | tee "$log_file"
    fi
  else
    $build_command >"$log_file" 2>&1
  fi

  # We need to have the output in a log file in all cases so we can check for
  # expected failures.
  if [ ${PIPESTATUS[0]} -eq 0 ] || is_expected_failure "$log_file"; then
    rm "$log_file"
  else
    all_builds_ok=0
    echo
    echo "Failed to build $scheme in $workspace:"
    echo "Log left in $log_file."
    echo "Continuing with next build..."
    echo
  fi
done

cd $CURRENT_DIR

# If any build failed, exit with a failure exit status so continuous integration
# tools can react appropriately.
if [ "$all_builds_ok" -eq 1 ]; then
  exit 0
else
  exit 1
fi

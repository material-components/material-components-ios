#!/bin/bash
#
# Copyright 2016-present the Material Components for iOS authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

readonly SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR="$SCRIPTS_DIR/.."

# Given a path to an Xcode log file in $1, exit with status 0 if looks like the
# failure is expected and can be ignored, or exit with non-zero status
# otherwise.
function is_expected_failure() {
  # A test target was specified with the 'build' command.
  grep --quiet "is not configured for Running" "$1" 
}

# Given a path to an Xcode log file in $1, print a guess at what caused the
# failure.
function guess_failure() {
  if [[ $TRAVIS == "true" ]]; then
    tail -n 200 "$1"
  else
    grep --context=20 "The following build commands failed:" "$1"
  fi
}

readonly WORKSPACE_SCHEMES=$("$SCRIPTS_DIR"/xcode/list_all_xcode_schemes)
readonly SIGNING_OPTIONS="CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO"
all_builds_ok=1
for workspace_scheme in $WORKSPACE_SCHEMES; do  
  workspace=$(echo $workspace_scheme | cut -d: -f1)
  scheme=$(echo $workspace_scheme | cut -d: -f2)
  
  echo "Building $scheme in $workspace."
  log_file=$(dirname "$workspace")/"build_log_for_scheme_${scheme}.txt"
  options="-workspace $workspace -scheme $scheme $SIGNING_OPTIONS"
  if xcodebuild $options $1 >"$log_file" 2>&1 || \
     is_expected_failure "$log_file"; then
    rm "$log_file"
  else
    all_builds_ok=0
    echo
    echo "Failed to build $scheme in $workspace:"
    guess_failure "$log_file"
    echo "Log left in $log_file."
    echo "Continuing with next build..."
    echo
  fi
done

# If any build failed, exit with a failure exit status so continuous integration 
# tools can react appropriately.
if [ "$all_builds_ok" -eq 1 ]; then
  exit 0
else
  exit 1
fi

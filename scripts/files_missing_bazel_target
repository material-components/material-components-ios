#!/bin/bash
#
# Copyright 2018-present the Material Components for iOS authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Finds all newly-added files that are missing BUILD targets
script_version=0.0.5

set -x -e

echo "Bazel target detection v${script_version}"

# Generates a list of files that were modified since the target branch 
modified_files() {
  echo "Entered 'modified_files'"

  # Move to our cloned repository
  if [ -n "$KOKORO_BUILD_NUMBER" ]; then
    pushd github/repo >> /dev/null
  fi

  pwd
  git fetch

  # `target_branch` is either the Pull Request destination branch (where it will be merged) or if
  # none can be determined, defaults to `develop`.
  if [ -n "$KOKORO_GITHUB_PULL_REQUEST_TARGET_BRANCH" ]; then
    target_branch="$KOKORO_GITHUB_PULL_REQUEST_TARGET_BRANCH"
  else
    target_branch=develop
  fi

  echo "Target branch: ${target_branch}"

  # `base_sha` is the merge base of `target_branch` and the current HEAD.
  echo "git merge-base '${target_branch}' HEAD"
  base_sha=$(git merge-base "${target_branch}" HEAD)

  echo "Base SHA: ${base_sha}"

  # `TARGET` is then all bazel targets affected by changes in the commit range between `base_sha`
  # and `HEAD`.  By default, that becomes all changes between the `develop` branch and the latest
  #  commit.
  range="${base_sha}...HEAD"

  
  git log --name-only --pretty=oneline --full-index "${range}" \
    | grep -vE '^[0-9a-f]{40} ' \
    | grep -E '(\.swift|\.h|\.m)' \
    | sort \
    | uniq

  if [ -n "$KOKORO_BUILD_NUMBER" ]; then
    popd >> /dev/null
  fi
}

# Determines if any of the modified files are not included in a bazel rule.
check_files_covered() {
  echo "Enter 'check_files_covered'"

  files=$(modified_files)
  if [ -z "$files" ]; then
    echo "No source files were modified"
    exit 0
  fi
  num_files="${#files[@]}"
  current_index=0
  for file in "${files[@]}"; do
    # allrdeps is part of Sky Query, which can only be accessed when universe_scope and order_output
    # are provided. See the following docs for more details:
    # https://docs.bazel.build/versions/master/query.html#sky-query
    targets=$(bazel query \
      --universe_scope=//... \
      --order_output=no \
      "kind(rule, allrdeps('$file'))" \
      2>/dev/null ) 
    if [ -z "$targets" ]; then
      missing_targets="${missing_targets}${file}\n"
      exit_status=1
    fi
    ((current_index++))
    if (( current_index%10==1 )); then
      echo "$current_index / $num_files" 
    fi
  done 
  

  if (( exit_status != 0 )); then
    echo  -e "The following files are not in any BUILD targets:\n\n${missing_targets}" | sort | uniq
    exit $exit_status
  fi 
} 

check_files_covered


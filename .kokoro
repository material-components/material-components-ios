#!/bin/bash
#
# Copyright 2017-present The Material Components for iOS Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Fail on any error.
set -e

KOKORO_RUNNER_VERSION="v4.*"

XCODE_MINIMUM_VERSION="8.3.0"

fix_bazel_imports() {
  if [ -z "$KOKORO_BUILD_NUMBER" ]; then
    tests_dir_prefix=""
  else
    tests_dir_prefix="github/repo/"
  fi
  
  rewrite_tests() {
    find "${stashed_dir}${tests_dir_prefix}"components/private/*/tests/unit -type f -name '*.swift' -exec perl -pi -e "$1" {} + || true
    find "${stashed_dir}${tests_dir_prefix}"components/*/tests/unit -type f -name '*.swift' -exec perl -pi -e "$1" {} + || true
  }
  rewrite_source() {
    find "${stashed_dir}${tests_dir_prefix}"components/private/*/src -type f -name '*.h' -exec perl -pi -e "$1" {} + || true
    find "${stashed_dir}${tests_dir_prefix}"components/private/*/src -type f -name '*.m' -exec perl -pi -e "$1" {} + || true
    find "${stashed_dir}${tests_dir_prefix}"components/*/src -type f -name '*.h' -exec perl -pi -e "$1" {} + || true
    find "${stashed_dir}${tests_dir_prefix}"components/*/src -type f -name '*.m' -exec perl -pi -e "$1" {} + || true
  }

  stashed_dir=""
  rewrite_tests "s/import MaterialComponents.Material(.+)_(.+)/import components_\1_\2/"
  rewrite_tests "s/import MaterialComponents.Material(.+)Scheme/import components_schemes_\1_\1/"
  rewrite_tests "s/import MaterialComponents.MaterialMath/import components_private_Math_Math/"
  rewrite_tests "s/import MaterialComponents.MaterialUIMetrics/import components_private_UIMetrics_UIMetrics/"
  rewrite_tests "s/import MaterialComponents.Material(.+)/import components_\1_\1/"
  rewrite_source "s/import <Motion(.+)\/Motion.+\.h>/import \"Motion\1.h\"/"
  rewrite_source "s/import <MDF(.+)\/MDF.+\.h>/import \"MDF\1.h\"/"
  rewrite_tests "s/import MDFTextAccessibility/import material_text_accessibility_ios_MDFTextAccessibility/"
  rewrite_tests "s/import MDFInternationalization/import material_internationalization_ios_MDFInternationalization/"
  stashed_dir="$(pwd)/"
  reset_imports() {
    # Undoes our source changes from above.
    rewrite_tests "s/import components_schemes_(.+)_.+/import MaterialComponents.Material\1Scheme/"
    rewrite_tests "s/import components_private_Math_Math/import MaterialComponents.MaterialMath/"
    rewrite_tests "s/import components_private_UIMetrics_UIMetrics/import MaterialComponents.MaterialUIMetrics/"
    rewrite_tests "s/import components_(.+)_\1/import MaterialComponents.Material\1/"
    rewrite_tests "s/import components_(.+)_(.+)/import MaterialComponents.Material\1_\2/"
    rewrite_source "s/import \"Motion(.+)\.h\"/import <Motion\1\/Motion\1.h>/"
    rewrite_source "s/import \"MDF(.+)\.h\"/import <MDF\1\/MDF\1.h>/"
    rewrite_tests "s/import material_text_accessibility_ios_MDFTextAccessibility/import MDFTextAccessibility/"
    rewrite_tests "s/import material_internationalization_ios_MDFInternationalization/import MDFInternationalization/"
  }
  trap reset_imports EXIT
}

version_as_number() {
  padded_version="${1%.}" # Strip any trailing dots
  # Pad with .0 until we get a M.m.p version string.
  while [ $(grep -o "\." <<< "$padded_version" | wc -l) -lt "2" ]; do
    padded_version=${padded_version}.0
  done
  echo "${padded_version//.}"
}

run_bazel() {
  echo "Running bazel builds..."

  fix_bazel_imports

  if [ -n "$KOKORO_BUILD_NUMBER" ]; then
    bazel version
  fi

  if [ -n "$VERBOSE_OUTPUT" ]; then
    verbosity_args="-v"
  fi

  if [ -z "$COMMAND" ]; then
    COMMAND="test"
  fi
  if [ -z "$TARGET" ]; then
    TARGET="//components/..."
  fi

  if [ -n "$XCODE_VERSION" ]; then
    xcode_versions="--xcode-version $XCODE_VERSION"
  else
    xcode_versions="--min-xcode-version $XCODE_MINIMUM_VERSION"
  fi

  ./.kokoro-ios-runner/bazel.sh $COMMAND $TARGET \
      $xcode_versions \
      $verbosity_args \
      --ios_minimum_os=8.0 \
      --ios_multi_cpus=i386,x86_64
}

run_cocoapods() {
  echo "Running cocoapods builds..."

  xcode_min_version_as_number="$(version_as_number $XCODE_MINIMUM_VERSION)"

  if [ -n "$KOKORO_BUILD_NUMBER" ]; then
    # Move into our cloned repo
    cd github/repo

    gem install xcpretty cocoapods --no-rdoc --no-ri --no-document --quiet
    pod --version
  fi

  BUILDS_TMP_PATH=$(mktemp -d)
  SEEN_XCODES_FILE_PATH="$BUILDS_TMP_PATH/seen_xcodes"
  touch "$SEEN_XCODES_FILE_PATH"
  xcodes=$(ls /Applications/ | grep "Xcode")
  for xcode_path in $xcodes; do
    xcode_version=$(cat /Applications/$xcode_path/Contents/version.plist \
      | grep "CFBundleShortVersionString" -A1 \
      | grep string \
      | cut -d'>' -f2 \
      | cut -d'<' -f1)
    xcode_version_as_number="$(version_as_number $xcode_version)"

    # Ignore duplicate Xcode installations
    if grep -xq "$xcode_version_as_number" "$SEEN_XCODES_FILE_PATH"; then
      continue
    fi

    echo "$xcode_version_as_number" >> "$SEEN_XCODES_FILE_PATH"

    if [ -n "$XCODE_VERSION" ]; then
      if [ "$xcode_version_as_number" -ne "$(version_as_number $XCODE_VERSION)" ]; then
        continue
      fi
    elif [ -n "$xcode_min_version_as_number" ]; then
      if [ "$xcode_version_as_number" -lt "$xcode_min_version_as_number" ]; then
        continue
      fi
    fi

    sudo xcode-select --switch /Applications/$xcode_path/Contents/Developer
    xcodebuild -version

    # Resolves the following crash when switching Xcode versions:
    # "Failed to locate a valid instance of CoreSimulatorService in the bootstrap"
    launchctl remove com.apple.CoreSimulator.CoreSimulatorService || true

    if [ "$DEPENDENCY_SYSTEM" = "cocoapods" ]; then
      bash scripts/prep_all
      bash scripts/build_all --verbose
      if [ -n "$IS_RELEASE" ]; then
        bash scripts/test_all
      else
        bash scripts/test_all catalog/MDCCatalog.xcworkspace:MDCUnitTests
      fi
    elif [ "$DEPENDENCY_SYSTEM" = "cocoapods-podspec" ]; then
      pod lib lint MaterialComponents.podspec
    fi
  done

  bash <(curl -s https://codecov.io/bash)
}

# For local runs, you must set the following environment variables:
#
#   DANGER_GITHUB_API_TOKEN -> Create a token here: https://github.com/settings/tokens.
#                              Must have public_repo scope.
#   DANGER_TEST_PR="###"    -> The PR # you want to test danger against.
#
# And you'll likely have to install danger:
#
#   yarn add danger
#
run_danger() {
  if [ -n "$KOKORO_BUILD_NUMBER" ]; then
    # Move into our cloned repo
    cd github/repo

    export DANGER_TEST_PR="$KOKORO_GITHUB_PULL_REQUEST_NUMBER"

    # Install danger
    yarn add danger
  fi

  # We're not a supported CI, so we have to pretend to be one.
  export DANGER_FAKE_CI="YEP"
  export DANGER_TEST_REPO="material-components/material-components-ios"

  # Run Danger
  yarn danger ci
}

generate_website() {
  if [ -n "$KOKORO_BUILD_NUMBER" ]; then
    # Move into our cloned repo
    cd github/repo

    ./scripts/build_site.sh

    gem install bundler --no-rdoc --no-ri --no-document --quiet
    brew update
    brew install yarn --without-node
  fi

  cd docsite-generator
  bundle install
  yarn install
  cd ../

  TMP_PATH=$(mktemp -d)
  ./scripts/build_site.sh 2>&1 | tee "$TMP_PATH/output"

  if [[ $(grep "^Error:" "$TMP_PATH/output") ]]; then
    # Make site generation errors be script failures. build_site.sh always exits with 0
    # unfortunately.
    exit 1
  fi
}

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -v|--verbose)
    VERBOSE_OUTPUT="1"
    shift
    ;;
  -d|--dependency_system)
    DEPENDENCY_SYSTEM="$2"
    shift
    shift
    ;;
  -c|--command)
    COMMAND="$2"
    shift
    shift
    ;;
  -t|--target)
    TARGET="$2"
    shift
    shift
    ;;
  *)
    POSITIONAL+=("$1")
    shift
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -n "$VERBOSE_OUTPUT" ]; then
  # Display commands to stderr.
  set -x
fi

if [ ! -d .kokoro-ios-runner ]; then
  git clone https://github.com/material-foundation/kokoro-ios-runner.git .kokoro-ios-runner
fi

pushd .kokoro-ios-runner
git fetch > /dev/null
TAG=$(git tag --sort=v:refname -l "$KOKORO_RUNNER_VERSION" | tail -n1)
git checkout "$TAG" > /dev/null
popd

case "$DEPENDENCY_SYSTEM" in
  "bazel")      run_bazel ;;
  "cocoapods")  run_cocoapods ;;
  "cocoapods-podspec")  run_cocoapods ;;
  "website")    generate_website ;;
  "danger")     run_danger ;;

  *)            run_bazel ;;
esac

echo "Success!"
